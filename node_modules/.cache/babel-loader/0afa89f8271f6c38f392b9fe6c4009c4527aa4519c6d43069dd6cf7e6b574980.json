{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\n\n// Sezon tarihleri, sağlanan programlara göre hassas bir şekilde ayarlandı.\nconst SEASONS = {\n  // Yaz Sezonu - Faz 1: İngilizce Ağırlıklı Hazırlık (1. Program Şablonu)\n  SEASON_1_PREP: {\n    START: new Date('2025-06-21'),\n    END: new Date('2025-07-31')\n  },\n  // Yaz Sezonu - Faz 2: Yoğun YKS Temposu (2. Program Şablonu)\n  SEASON_1_INTENSE: {\n    START: new Date('2025-08-01'),\n    END: new Date('2025-09-15')\n  },\n  // Okul Dönemi (3. Program Şablonu)\n  SEASON_2_SCHOOL: {\n    START: new Date('2025-09-16'),\n    END: new Date('2026-03-15')\n  },\n  // YKS Kampı (4. ve 5. Program Şablonu - En detaylı olanı esas alındı)\n  SEASON_3_CAMP: {\n    START: new Date('2026-03-16'),\n    END: new Date('2026-06-21')\n  },\n  // YKS Sonrası - Sonuç ve Tercih Dönemi\n  SEASON_4_POST_YKS: {\n    START: new Date('2026-06-22'),\n    END: new Date('2026-09-15')\n  }\n};\nexport const useSeason = () => {\n  _s();\n  const [seasonInfo, setSeasonInfo] = useState({\n    key: 'off_season',\n    name: 'SİSTEM BAŞLATILIYOR...'\n  });\n  useEffect(() => {\n    const now = new Date();\n    // const now = new Date('2025-08-05'); // FARKLI SEZONLARI TEST ETMEK İÇİN TARİHİ DEĞİŞTİREBİLİRSİN\n\n    if (now >= SEASONS.SEASON_1_PREP.START && now <= SEASONS.SEASON_1_PREP.END) {\n      setSeasonInfo({\n        key: 'season1_prep',\n        name: 'KURULUM: İngilizce Hazırlık Fazı'\n      });\n    } else if (now >= SEASONS.SEASON_1_INTENSE.START && now <= SEASONS.SEASON_1_INTENSE.END) {\n      setSeasonInfo({\n        key: 'season1_intense',\n        name: 'KURULUM: Yoğun YKS Fazı'\n      });\n    } else if (now >= SEASONS.SEASON_2_SCHOOL.START && now <= SEASONS.SEASON_2_SCHOOL.END) {\n      setSeasonInfo({\n        key: 'season2_school',\n        name: 'DENEY: Okul Dönemi'\n      });\n    } else if (now >= SEASONS.SEASON_3_CAMP.START && now <= SEASONS.SEASON_3_CAMP.END) {\n      setSeasonInfo({\n        key: 'season3_camp',\n        name: 'SENTEZ: Nihai YKS Kampı'\n      });\n    } else if (now >= SEASONS.SEASON_4_POST_YKS.START && now <= SEASONS.SEASON_4_POST_YKS.END) {\n      setSeasonInfo({\n        key: 'season4_post_yks',\n        name: 'SONUÇ: Değerlendirme Fazı'\n      });\n    } else {\n      setSeasonInfo({\n        key: 'off_season',\n        name: 'BEKLEME MODU'\n      });\n    }\n  }, []);\n  return seasonInfo;\n};\n_s(useSeason, \"QbsQxkLwcfG1zScxVD/OKRphu08=\");","map":{"version":3,"names":["useState","useEffect","SEASONS","SEASON_1_PREP","START","Date","END","SEASON_1_INTENSE","SEASON_2_SCHOOL","SEASON_3_CAMP","SEASON_4_POST_YKS","useSeason","_s","seasonInfo","setSeasonInfo","key","name","now"],"sources":["C:/Users/Juuzou/Desktop/YKS/genesis/src/hooks/useSeason.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\n// Sezon tarihleri, sağlanan programlara göre hassas bir şekilde ayarlandı.\r\nconst SEASONS = {\r\n  // Yaz Sezonu - Faz 1: İngilizce Ağırlıklı Hazırlık (1. Program Şablonu)\r\n  SEASON_1_PREP: { START: new Date('2025-06-21'), END: new Date('2025-07-31') },\r\n  // Yaz Sezonu - Faz 2: Yoğun YKS Temposu (2. Program Şablonu)\r\n  SEASON_1_INTENSE: { START: new Date('2025-08-01'), END: new Date('2025-09-15') },\r\n  // Okul Dönemi (3. Program Şablonu)\r\n  SEASON_2_SCHOOL: { START: new Date('2025-09-16'), END: new Date('2026-03-15') },\r\n  // YKS Kampı (4. ve 5. Program Şablonu - En detaylı olanı esas alındı)\r\n  SEASON_3_CAMP: { START: new Date('2026-03-16'), END: new Date('2026-06-21') },\r\n  // YKS Sonrası - Sonuç ve Tercih Dönemi\r\n  SEASON_4_POST_YKS: { START: new Date('2026-06-22'), END: new Date('2026-09-15') },\r\n};\r\n\r\nexport const useSeason = () => {\r\n  const [seasonInfo, setSeasonInfo] = useState({ key: 'off_season', name: 'SİSTEM BAŞLATILIYOR...' });\r\n\r\n  useEffect(() => {\r\n    const now = new Date();\r\n    // const now = new Date('2025-08-05'); // FARKLI SEZONLARI TEST ETMEK İÇİN TARİHİ DEĞİŞTİREBİLİRSİN\r\n\r\n    if (now >= SEASONS.SEASON_1_PREP.START && now <= SEASONS.SEASON_1_PREP.END) {\r\n      setSeasonInfo({ key: 'season1_prep', name: 'KURULUM: İngilizce Hazırlık Fazı' });\r\n    } else if (now >= SEASONS.SEASON_1_INTENSE.START && now <= SEASONS.SEASON_1_INTENSE.END) {\r\n      setSeasonInfo({ key: 'season1_intense', name: 'KURULUM: Yoğun YKS Fazı' });\r\n    } else if (now >= SEASONS.SEASON_2_SCHOOL.START && now <= SEASONS.SEASON_2_SCHOOL.END) {\r\n      setSeasonInfo({ key: 'season2_school', name: 'DENEY: Okul Dönemi' });\r\n    } else if (now >= SEASONS.SEASON_3_CAMP.START && now <= SEASONS.SEASON_3_CAMP.END) {\r\n      setSeasonInfo({ key: 'season3_camp', name: 'SENTEZ: Nihai YKS Kampı' });\r\n    } else if (now >= SEASONS.SEASON_4_POST_YKS.START && now <= SEASONS.SEASON_4_POST_YKS.END) {\r\n      setSeasonInfo({ key: 'season4_post_yks', name: 'SONUÇ: Değerlendirme Fazı' });\r\n    } else {\r\n      setSeasonInfo({ key: 'off_season', name: 'BEKLEME MODU' });\r\n    }\r\n  }, []);\r\n\r\n  return seasonInfo;\r\n};"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE3C;AACA,MAAMC,OAAO,GAAG;EACd;EACAC,aAAa,EAAE;IAAEC,KAAK,EAAE,IAAIC,IAAI,CAAC,YAAY,CAAC;IAAEC,GAAG,EAAE,IAAID,IAAI,CAAC,YAAY;EAAE,CAAC;EAC7E;EACAE,gBAAgB,EAAE;IAAEH,KAAK,EAAE,IAAIC,IAAI,CAAC,YAAY,CAAC;IAAEC,GAAG,EAAE,IAAID,IAAI,CAAC,YAAY;EAAE,CAAC;EAChF;EACAG,eAAe,EAAE;IAAEJ,KAAK,EAAE,IAAIC,IAAI,CAAC,YAAY,CAAC;IAAEC,GAAG,EAAE,IAAID,IAAI,CAAC,YAAY;EAAE,CAAC;EAC/E;EACAI,aAAa,EAAE;IAAEL,KAAK,EAAE,IAAIC,IAAI,CAAC,YAAY,CAAC;IAAEC,GAAG,EAAE,IAAID,IAAI,CAAC,YAAY;EAAE,CAAC;EAC7E;EACAK,iBAAiB,EAAE;IAAEN,KAAK,EAAE,IAAIC,IAAI,CAAC,YAAY,CAAC;IAAEC,GAAG,EAAE,IAAID,IAAI,CAAC,YAAY;EAAE;AAClF,CAAC;AAED,OAAO,MAAMM,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAC;IAAEe,GAAG,EAAE,YAAY;IAAEC,IAAI,EAAE;EAAyB,CAAC,CAAC;EAEnGf,SAAS,CAAC,MAAM;IACd,MAAMgB,GAAG,GAAG,IAAIZ,IAAI,CAAC,CAAC;IACtB;;IAEA,IAAIY,GAAG,IAAIf,OAAO,CAACC,aAAa,CAACC,KAAK,IAAIa,GAAG,IAAIf,OAAO,CAACC,aAAa,CAACG,GAAG,EAAE;MAC1EQ,aAAa,CAAC;QAAEC,GAAG,EAAE,cAAc;QAAEC,IAAI,EAAE;MAAmC,CAAC,CAAC;IAClF,CAAC,MAAM,IAAIC,GAAG,IAAIf,OAAO,CAACK,gBAAgB,CAACH,KAAK,IAAIa,GAAG,IAAIf,OAAO,CAACK,gBAAgB,CAACD,GAAG,EAAE;MACvFQ,aAAa,CAAC;QAAEC,GAAG,EAAE,iBAAiB;QAAEC,IAAI,EAAE;MAA0B,CAAC,CAAC;IAC5E,CAAC,MAAM,IAAIC,GAAG,IAAIf,OAAO,CAACM,eAAe,CAACJ,KAAK,IAAIa,GAAG,IAAIf,OAAO,CAACM,eAAe,CAACF,GAAG,EAAE;MACrFQ,aAAa,CAAC;QAAEC,GAAG,EAAE,gBAAgB;QAAEC,IAAI,EAAE;MAAqB,CAAC,CAAC;IACtE,CAAC,MAAM,IAAIC,GAAG,IAAIf,OAAO,CAACO,aAAa,CAACL,KAAK,IAAIa,GAAG,IAAIf,OAAO,CAACO,aAAa,CAACH,GAAG,EAAE;MACjFQ,aAAa,CAAC;QAAEC,GAAG,EAAE,cAAc;QAAEC,IAAI,EAAE;MAA0B,CAAC,CAAC;IACzE,CAAC,MAAM,IAAIC,GAAG,IAAIf,OAAO,CAACQ,iBAAiB,CAACN,KAAK,IAAIa,GAAG,IAAIf,OAAO,CAACQ,iBAAiB,CAACJ,GAAG,EAAE;MACzFQ,aAAa,CAAC;QAAEC,GAAG,EAAE,kBAAkB;QAAEC,IAAI,EAAE;MAA4B,CAAC,CAAC;IAC/E,CAAC,MAAM;MACLF,aAAa,CAAC;QAAEC,GAAG,EAAE,YAAY;QAAEC,IAAI,EAAE;MAAe,CAAC,CAAC;IAC5D;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOH,UAAU;AACnB,CAAC;AAACD,EAAA,CAvBWD,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}