{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Juuzou\\\\Desktop\\\\YKS\\\\genesis\\\\src\\\\pages\\\\DashboardPage.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport styled from 'styled-components';\nimport QuestCard from '../components/dashboard/QuestCard';\nimport StatusBar from '../components/layout/StatusBar';\nimport { protocols } from '../data/protocols';\nimport { useUserProgress } from '../contexts/UserProgressContext';\nimport { useSeason } from '../hooks/useSeason';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst DashboardContainer = styled.div`\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 0 2rem 2rem 2rem;\n`;\n_c = DashboardContainer;\nconst Header = styled.header`\n  margin-bottom: 2rem;\n  h1 {\n    font-size: 2.5rem;\n    text-shadow: 0 0 10px ${({\n  theme\n}) => theme.colors.primary};\n  }\n  p {\n    color: ${({\n  theme\n}) => theme.colors.textSecondary};\n    font-size: 1.1rem;\n  }\n`;\n_c2 = Header;\nconst QuestList = styled.div`\n  display: grid;\n  gap: 1.5rem;\n`;\n_c3 = QuestList;\nfunction DashboardPage() {\n  _s();\n  const {\n    completeProtocol,\n    completedProtocols\n  } = useUserProgress();\n  const {\n    key: seasonKey,\n    name: seasonName\n  } = useSeason();\n  const today = new Date().getDay();\n  // DÜZELTME: Pazar günü için dayIndex 0 olmalı, veritabanını ona göre güncelleyeceğiz.\n  const dayIndex = today;\n  const activeProtocols = protocols[seasonKey] || [];\n  const todaysProtocols = activeProtocols.filter(p => Array.isArray(p.day) ? p.day.includes(dayIndex) : p.day === dayIndex);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(StatusBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DashboardContainer, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Kontrol Paneli\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Mevcut Sezon: \", seasonName, \" | Protokoller\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(QuestList, {\n        children: todaysProtocols.length > 0 ? todaysProtocols.map(protocol => /*#__PURE__*/_jsxDEV(QuestCard, {\n          protocol: protocol,\n          onComplete: completeProtocol,\n          isCompleted: completedProtocols.has(protocol.id)\n        }, protocol.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 15\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Bug\\xFCn i\\xE7in planlanm\\u0131\\u015F bir protokol bulunmuyor. Zihinsel Dekontaminasyon i\\xE7in iyi bir g\\xFCn.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(DashboardPage, \"A8xbnnIYWKqP3yRNhuhzV9kmVfE=\", false, function () {\n  return [useUserProgress, useSeason];\n});\n_c4 = DashboardPage;\nexport default DashboardPage;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"DashboardContainer\");\n$RefreshReg$(_c2, \"Header\");\n$RefreshReg$(_c3, \"QuestList\");\n$RefreshReg$(_c4, \"DashboardPage\");","map":{"version":3,"names":["React","styled","QuestCard","StatusBar","protocols","useUserProgress","useSeason","jsxDEV","_jsxDEV","Fragment","_Fragment","DashboardContainer","div","_c","Header","header","theme","colors","primary","textSecondary","_c2","QuestList","_c3","DashboardPage","_s","completeProtocol","completedProtocols","key","seasonKey","name","seasonName","today","Date","getDay","dayIndex","activeProtocols","todaysProtocols","filter","p","Array","isArray","day","includes","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","protocol","onComplete","isCompleted","has","id","_c4","$RefreshReg$"],"sources":["C:/Users/Juuzou/Desktop/YKS/genesis/src/pages/DashboardPage.js"],"sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\nimport QuestCard from '../components/dashboard/QuestCard';\r\nimport StatusBar from '../components/layout/StatusBar';\r\nimport { protocols } from '../data/protocols';\r\nimport { useUserProgress } from '../contexts/UserProgressContext';\r\nimport { useSeason } from '../hooks/useSeason';\r\n\r\nconst DashboardContainer = styled.div`\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n  padding: 0 2rem 2rem 2rem;\r\n`;\r\n\r\nconst Header = styled.header`\r\n  margin-bottom: 2rem;\r\n  h1 {\r\n    font-size: 2.5rem;\r\n    text-shadow: 0 0 10px ${({ theme }) => theme.colors.primary};\r\n  }\r\n  p {\r\n    color: ${({ theme }) => theme.colors.textSecondary};\r\n    font-size: 1.1rem;\r\n  }\r\n`;\r\n\r\nconst QuestList = styled.div`\r\n  display: grid;\r\n  gap: 1.5rem;\r\n`;\r\n\r\nfunction DashboardPage() {\r\n  const { completeProtocol, completedProtocols } = useUserProgress();\r\n  const { key: seasonKey, name: seasonName } = useSeason();\r\n\r\n  const today = new Date().getDay();\r\n  // DÜZELTME: Pazar günü için dayIndex 0 olmalı, veritabanını ona göre güncelleyeceğiz.\r\n  const dayIndex = today;\r\n\r\n  const activeProtocols = protocols[seasonKey] || [];\r\n  const todaysProtocols = activeProtocols.filter(p => \r\n      Array.isArray(p.day) ? p.day.includes(dayIndex) : p.day === dayIndex\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <StatusBar />\r\n      <DashboardContainer>\r\n        <Header>\r\n          <h1>Kontrol Paneli</h1>\r\n          <p>Mevcut Sezon: {seasonName} | Protokoller</p>\r\n        </Header>\r\n        <QuestList>\r\n          {todaysProtocols.length > 0 ? (\r\n            todaysProtocols.map(protocol => (\r\n              <QuestCard \r\n                key={protocol.id} \r\n                protocol={protocol}\r\n                onComplete={completeProtocol}\r\n                isCompleted={completedProtocols.has(protocol.id)}\r\n              />\r\n            ))\r\n          ) : (\r\n            <p>Bugün için planlanmış bir protokol bulunmuyor. Zihinsel Dekontaminasyon için iyi bir gün.</p>\r\n          )}\r\n        </QuestList>\r\n      </DashboardContainer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default DashboardPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}