{"ast":null,"code":"import _taggedTemplateLiteral from\"C:/Users/Juuzou/Desktop/YKS/genesis/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";var _templateObject,_templateObject2,_templateObject3;import React from'react';import styled from'styled-components';import QuestCard from'../components/dashboard/QuestCard';import StatusBar from'../components/layout/StatusBar';import{protocols}from'../data/protocols';import{useUserProgress}from'../contexts/UserProgressContext';import{useSeason}from'../hooks/useSeason';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const DashboardContainer=styled.div(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  max-width: 1200px;\\n  margin: 0 auto;\\n  padding: 0 2rem 2rem 2rem;\\n\"])));const Header=styled.header(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  margin-bottom: 2rem;\\n  h1 {\\n    font-size: 2.5rem;\\n    text-shadow: 0 0 10px \",\";\\n  }\\n  p {\\n    color: \",\";\\n    font-size: 1.1rem;\\n  }\\n\"])),_ref=>{let{theme}=_ref;return theme.colors.primary;},_ref2=>{let{theme}=_ref2;return theme.colors.textSecondary;});const QuestList=styled.div(_templateObject3||(_templateObject3=_taggedTemplateLiteral([\"\\n  display: grid;\\n  gap: 1.5rem;\\n\"])));function DashboardPage(){const{completeProtocol,completedProtocols}=useUserProgress();const{key:seasonKey,name:seasonName}=useSeason();const today=new Date().getDay();// DÜZELTME: Pazar günü için dayIndex 0 olmalı, veritabanını ona göre güncelleyeceğiz.\nconst dayIndex=today;const activeProtocols=protocols[seasonKey]||[];const todaysProtocols=activeProtocols.filter(p=>Array.isArray(p.day)?p.day.includes(dayIndex):p.day===dayIndex);return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(StatusBar,{}),/*#__PURE__*/_jsxs(DashboardContainer,{children:[/*#__PURE__*/_jsxs(Header,{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Kontrol Paneli\"}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Mevcut Sezon: \",seasonName,\" | Protokoller\"]})]}),/*#__PURE__*/_jsx(QuestList,{children:todaysProtocols.length>0?todaysProtocols.map(protocol=>/*#__PURE__*/_jsx(QuestCard,{protocol:protocol,onComplete:completeProtocol,isCompleted:completedProtocols.has(protocol.id)},protocol.id)):/*#__PURE__*/_jsx(\"p\",{children:\"Bug\\xFCn i\\xE7in planlanm\\u0131\\u015F bir protokol bulunmuyor. Zihinsel Dekontaminasyon i\\xE7in iyi bir g\\xFCn.\"})})]})]});}export default DashboardPage;","map":{"version":3,"names":["React","styled","QuestCard","StatusBar","protocols","useUserProgress","useSeason","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","DashboardContainer","div","_templateObject","_taggedTemplateLiteral","Header","header","_templateObject2","_ref","theme","colors","primary","_ref2","textSecondary","QuestList","_templateObject3","DashboardPage","completeProtocol","completedProtocols","key","seasonKey","name","seasonName","today","Date","getDay","dayIndex","activeProtocols","todaysProtocols","filter","p","Array","isArray","day","includes","children","length","map","protocol","onComplete","isCompleted","has","id"],"sources":["C:/Users/Juuzou/Desktop/YKS/genesis/src/pages/DashboardPage.js"],"sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\nimport QuestCard from '../components/dashboard/QuestCard';\r\nimport StatusBar from '../components/layout/StatusBar';\r\nimport { protocols } from '../data/protocols';\r\nimport { useUserProgress } from '../contexts/UserProgressContext';\r\nimport { useSeason } from '../hooks/useSeason';\r\n\r\nconst DashboardContainer = styled.div`\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n  padding: 0 2rem 2rem 2rem;\r\n`;\r\n\r\nconst Header = styled.header`\r\n  margin-bottom: 2rem;\r\n  h1 {\r\n    font-size: 2.5rem;\r\n    text-shadow: 0 0 10px ${({ theme }) => theme.colors.primary};\r\n  }\r\n  p {\r\n    color: ${({ theme }) => theme.colors.textSecondary};\r\n    font-size: 1.1rem;\r\n  }\r\n`;\r\n\r\nconst QuestList = styled.div`\r\n  display: grid;\r\n  gap: 1.5rem;\r\n`;\r\n\r\nfunction DashboardPage() {\r\n  const { completeProtocol, completedProtocols } = useUserProgress();\r\n  const { key: seasonKey, name: seasonName } = useSeason();\r\n\r\n  const today = new Date().getDay();\r\n  // DÜZELTME: Pazar günü için dayIndex 0 olmalı, veritabanını ona göre güncelleyeceğiz.\r\n  const dayIndex = today;\r\n\r\n  const activeProtocols = protocols[seasonKey] || [];\r\n  const todaysProtocols = activeProtocols.filter(p => \r\n      Array.isArray(p.day) ? p.day.includes(dayIndex) : p.day === dayIndex\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <StatusBar />\r\n      <DashboardContainer>\r\n        <Header>\r\n          <h1>Kontrol Paneli</h1>\r\n          <p>Mevcut Sezon: {seasonName} | Protokoller</p>\r\n        </Header>\r\n        <QuestList>\r\n          {todaysProtocols.length > 0 ? (\r\n            todaysProtocols.map(protocol => (\r\n              <QuestCard \r\n                key={protocol.id} \r\n                protocol={protocol}\r\n                onComplete={completeProtocol}\r\n                isCompleted={completedProtocols.has(protocol.id)}\r\n              />\r\n            ))\r\n          ) : (\r\n            <p>Bugün için planlanmış bir protokol bulunmuyor. Zihinsel Dekontaminasyon için iyi bir gün.</p>\r\n          )}\r\n        </QuestList>\r\n      </DashboardContainer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default DashboardPage;"],"mappings":"+LAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,MAAO,CAAAC,MAAM,KAAM,mBAAmB,CACtC,MAAO,CAAAC,SAAS,KAAM,mCAAmC,CACzD,MAAO,CAAAC,SAAS,KAAM,gCAAgC,CACtD,OAASC,SAAS,KAAQ,mBAAmB,CAC7C,OAASC,eAAe,KAAQ,iCAAiC,CACjE,OAASC,SAAS,KAAQ,oBAAoB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,CAAAC,QAAA,IAAAC,SAAA,yBAE/C,KAAM,CAAAC,kBAAkB,CAAGZ,MAAM,CAACa,GAAG,CAAAC,eAAA,GAAAA,eAAA,CAAAC,sBAAA,iFAIpC,CAED,KAAM,CAAAC,MAAM,CAAGhB,MAAM,CAACiB,MAAM,CAAAC,gBAAA,GAAAA,gBAAA,CAAAH,sBAAA,4JAIAI,IAAA,MAAC,CAAEC,KAAM,CAAC,CAAAD,IAAA,OAAK,CAAAC,KAAK,CAACC,MAAM,CAACC,OAAO,GAGlDC,KAAA,MAAC,CAAEH,KAAM,CAAC,CAAAG,KAAA,OAAK,CAAAH,KAAK,CAACC,MAAM,CAACG,aAAa,GAGrD,CAED,KAAM,CAAAC,SAAS,CAAGzB,MAAM,CAACa,GAAG,CAAAa,gBAAA,GAAAA,gBAAA,CAAAX,sBAAA,4CAG3B,CAED,QAAS,CAAAY,aAAaA,CAAA,CAAG,CACvB,KAAM,CAAEC,gBAAgB,CAAEC,kBAAmB,CAAC,CAAGzB,eAAe,CAAC,CAAC,CAClE,KAAM,CAAE0B,GAAG,CAAEC,SAAS,CAAEC,IAAI,CAAEC,UAAW,CAAC,CAAG5B,SAAS,CAAC,CAAC,CAExD,KAAM,CAAA6B,KAAK,CAAG,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,MAAM,CAAC,CAAC,CACjC;AACA,KAAM,CAAAC,QAAQ,CAAGH,KAAK,CAEtB,KAAM,CAAAI,eAAe,CAAGnC,SAAS,CAAC4B,SAAS,CAAC,EAAI,EAAE,CAClD,KAAM,CAAAQ,eAAe,CAAGD,eAAe,CAACE,MAAM,CAACC,CAAC,EAC5CC,KAAK,CAACC,OAAO,CAACF,CAAC,CAACG,GAAG,CAAC,CAAGH,CAAC,CAACG,GAAG,CAACC,QAAQ,CAACR,QAAQ,CAAC,CAAGI,CAAC,CAACG,GAAG,GAAKP,QAChE,CAAC,CAED,mBACE5B,KAAA,CAAAE,SAAA,EAAAmC,QAAA,eACEvC,IAAA,CAACL,SAAS,GAAE,CAAC,cACbO,KAAA,CAACG,kBAAkB,EAAAkC,QAAA,eACjBrC,KAAA,CAACO,MAAM,EAAA8B,QAAA,eACLvC,IAAA,OAAAuC,QAAA,CAAI,gBAAc,CAAI,CAAC,cACvBrC,KAAA,MAAAqC,QAAA,EAAG,gBAAc,CAACb,UAAU,CAAC,gBAAc,EAAG,CAAC,EACzC,CAAC,cACT1B,IAAA,CAACkB,SAAS,EAAAqB,QAAA,CACPP,eAAe,CAACQ,MAAM,CAAG,CAAC,CACzBR,eAAe,CAACS,GAAG,CAACC,QAAQ,eAC1B1C,IAAA,CAACN,SAAS,EAERgD,QAAQ,CAAEA,QAAS,CACnBC,UAAU,CAAEtB,gBAAiB,CAC7BuB,WAAW,CAAEtB,kBAAkB,CAACuB,GAAG,CAACH,QAAQ,CAACI,EAAE,CAAE,EAH5CJ,QAAQ,CAACI,EAIf,CACF,CAAC,cAEF9C,IAAA,MAAAuC,QAAA,CAAG,iHAAyF,CAAG,CAChG,CACQ,CAAC,EACM,CAAC,EACrB,CAAC,CAEP,CAEA,cAAe,CAAAnB,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}